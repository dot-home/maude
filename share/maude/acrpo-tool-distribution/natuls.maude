fmod NATU-LS is sorts Natu NatuList  NatuSet .
  subsorts Natu < NatuList  NatuSet .
  op 0     : -> Natu [ctor] .
  op mt    : -> NatuSet [ctor] .
  op nil   : -> NatuList [ctor] .  
  op s     : Natu -> Natu [ctor] .
  op _+_   : Natu Natu -> Natu [comm] .
  op _*_   : Natu Natu -> Natu .
  op _^_   : Natu Natu -> Natu .
  op _,_   : NatuSet NatuSet -> NatuSet [ctor assoc comm] .
  op __    : NatuList NatuList -> NatuList [ctor assoc] .
  op length   : NatuList -> Natu .
  op rev   : NatuList -> NatuList .
  op list2set : NatuList -> NatuSet .

  eq X:Natu + 0 = X:Natu .
  eq X:Natu + s(Y:Natu) = s(X:Natu + Y:Natu) .
  eq X:Natu * 0 = (0).Natu .
  eq X:Natu * s(Y:Natu) = (X:Natu * Y:Natu) + X:Natu .
  eq X:Natu ^ 0 = (s(0)).Natu .
  eq S:NatuSet , S:NatuSet = S:NatuSet .
  eq X:Natu ^ s(Y:Natu) = X:Natu * (X:Natu ^ Y:Natu) .
  eq length((nil).NatuList) = (0).Natu .
  eq length(X:Natu) = (s(0)).Natu .
  eq length(X:Natu L:NatuList) = s(length(L:NatuList)) .
  eq rev((nil).NatuList) = (nil).NatuList .
  eq rev(X:Natu) = X:Natu .
  eq rev(X:Natu L:NatuList) = rev(L:NatuList) X:Natu .
  eq list2set((nil).NatuList) = (mt).NatuSet .
  eq list2set(X:Natu) = X:Natu .
  eq list2set(X:Natu L:NatuList) = X:Natu , list2set(L:NatuList) .
endfm